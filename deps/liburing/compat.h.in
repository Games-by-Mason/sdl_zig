#ifndef LIBURING_COMPAT_H
#define LIBURING_COMPAT_H

#undef HAS_KERNEL_RWF_T
#undef HAS_KERNEL_TIMESPEC
#undef HAS_OPENAT_2
#undef HAS_SYS_STAT
#undef HAS_FUTEX_WAITV
#undef HAS_IDTYPE_T

#if !HAS_KERNEL_RWF_T
	typedef int __kernel_rwf_t;
#endif

#if HAS_KERNEL_TIMESPEC
	#include <linux/time_types.h>
	/* <linux/time_types.h> is included above and not needed again */
	#define UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H 1
#else
	#include <stdint.h>

	struct __kernel_timespec {
		int64_t		tv_sec;
		long long	tv_nsec;
	};

	/* <linux/time_types.h> is not available, so it can't be included */
	#define UAPI_LINUX_IO_URING_H_SKIP_LINUX_TIME_TYPES_H 1
#endif

#if HAS_OPENAT_2
	#include <linux/openat2.h>
#else
	#include <inttypes.h>

	struct open_how {
		uint64_t	flags;
		uint64_t	mode;
		uint64_t	resolve;
	};
#endif

#if HAS_SYS_STAT
	#include <sys/stat.h>
#endif

#if !HAS_FUTEX_WAITV
	#include <inttypes.h>

	#define FUTEX_32	2
	#define FUTEX_WAITV_MAX	128

	struct futex_waitv {
		uint64_t	val;
		uint64_t	uaddr;
		uint32_t	flags;
		uint32_t	__reserved;
	};
#endif

#if !HAS_IDTYPE_T
	typedef enum
	{
	  P_ALL,		/* Wait for any child.  */
	  P_PID,		/* Wait for specified process.  */
	  P_PGID		/* Wait for members of process group.  */
	} idtype_t;
#endif

#if __has_include(<linux/blkdev.h>)
	#include <linux/blkdev.h>
#endif
#if __has_include(<linux/ioctl.h>)
	#include <linux/ioctl.h>
#endif
#ifndef BLOCK_URING_CMD_DISCARD
	#define BLOCK_URING_CMD_DISCARD                        _IO(0x12, 0)
#endif

#endif

